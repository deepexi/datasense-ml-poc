# 统计:
# 门店=able, 在 2000年, 每天的销售额, 以及该天之前三天的累计销售额, 按日期排序
# 输出格式 = able | year | month | day_of_month | 当前销售额 | 前三天销售额
# 注意: 并不是每天都有销售额, 所以日期排序有空缺, 日期并不连续

---
version: v1
resource: model_def
name: store
source:
  source_type: table
  table: store
  datasource: ds_id_ck01
joins:
dimensions:
columns:
  - name: s_store_sk
    data_type: int
  - name: s_store_name
    data_type: string

---
version: v1
resource: model_def
name: date_dim
source:
  source_type: table
  table: date_dim
  datasource: ds_id_ck01
joins:
dimensions:
columns:
  - name: d_date_sk
    data_type: int
  - name: d_year
    data_type: int
  - name: d_moy
    data_type: int
  - name: d_dom
    data_type: int

---
version: v1
resource: model_def
name: store_sales
source:
  source_type: table
  table: store_sales
  datasource: ds_id_ck01
joins:
  - model_name: date_dim
    conditions: [ ss_sold_date_sk=date_dim.d_date_sk ]
  - model_name: store
    conditions: [ ss_store_sk=store.s_store_sk ]
dimensions: [ d_year, d_moy, s_store_name ]
columns:
  - name: ss_net_paid
    data_type: decimal
  - name: ss_net_profit
    data_type: decimal
  - name: d_year
    expr: date_dim.d_year
  - name: d_moy
    expr: date_dim.d_moy
  - name: s_store_name
    expr: store.s_store_name
  - name: d_dom
    expr: date_dim.d_dom

---
version: v1
resource: metric_def
name: metric_sum_ss_net_paid__store_sales # 命名规范 metric_[聚合描述]__[model]
model_name: store_sales
dimensions: [ d_year, d_moy, d_dom, s_store_name ]
agg: sum(ss_net_paid)


---
version: v1
resource: metrics_query
# 命名规范 query_[query描述]__[metric_name]
name: query_by_month__metric_sum_ss_net_paid__store_sales
metric_names: [ metric_sum_ss_net_paid__store_sales ]
dimensions: [ d_year, d_moy, d_dom, s_store_name ]
# model_filters 填写维度名
model_filters: [ d_year=2000, s_store_name='able' ]
# metric_filters 填写指标名称
metric_filters: [ metric_sum_ss_net_paid__store_sales > 0 ]
# 该窗口表示: 从(最早一条, 到 current row]
window:
  window_type: sliding # sliding | tumbling, 目前仅支持 sliding
  partitions: [ s_store_name, d_year ]
  order_bys:
    - name: d_moy
  # unbounded_preceding 对应累计求和
  frame_type: rows
  start:
    base: unbounded_preceding
    offset: 0
  end:
    base: current_row
    offset: 0

---
version: v1
resource: model_debug
sql: >-
  with t1 as (
    with store_sales as (
      with store_sales as ( select * from store_sales )
      select
        store_sales.ss_net_paid as ss_net_paid,
        store_sales.ss_net_profit as ss_net_profit,
        date_dim.d_year as d_year,
        date_dim.d_moy as d_moy,
        date_dim.d_dom as d_dom,
        store.s_store_name as s_store_name
      from store_sales
      inner join date_dim on store_sales.ss_sold_date_sk=date_dim.d_date_sk
      inner join store on store_sales.ss_store_sk=store.s_store_sk
    )
    select
      make_date(d_year, d_moy, d_dom) as _the_date, -- 这里因为需要按天累计, 创建了日期列
      store_sales.s_store_name as s_store_name,
      store_sales.d_year as d_year,
      store_sales.d_moy as d_moy,
      store_sales.d_dom as d_dom,
      sum(ss_net_paid) as day_sum_ss_net_paid
    from store_sales
    where
      store_sales.d_year=2000
      and s_store_name='able'
      group by s_store_name, d_year, d_moy, d_dom
  )
  select
    _the_date,
    s_store_name,
    d_year,
    d_moy,
    d_dom,
    day_sum_ss_net_paid,
    sum(day_sum_ss_net_paid) over (
      partition by 		s_store_name
      order by _the_date
      range between INTERVAL '3 days' PRECEDING and INTERVAL '1 day' PRECEDING
    )
  from t1